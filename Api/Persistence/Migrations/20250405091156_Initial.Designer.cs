// <auto-generated />
using System;
using Api.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Persistence.Migrations
{
    [DbContext(typeof(WorkSpaceDbContext))]
    [Migration("20250405091156_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Features.Permissions.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Permissions", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01960516-468d-7f11-90f2-e166cfda751f"),
                            Name = "read"
                        },
                        new
                        {
                            Id = new Guid("01960516-cbce-7251-b410-071a6dd1a200"),
                            Name = "write"
                        },
                        new
                        {
                            Id = new Guid("01960517-4409-7812-a4c4-3b3c1b3c676c"),
                            Name = "delete"
                        },
                        new
                        {
                            Id = new Guid("01960518-2c6e-733c-a464-994496458d89"),
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("Api.Features.RolePermissions.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0196051a-17cf-72b6-b98d-4cb5a6c65b83"),
                            PermissionId = new Guid("01960516-468d-7f11-90f2-e166cfda751f"),
                            RoleId = new Guid("01960513-664b-7304-92de-d2544cfa1ff7")
                        },
                        new
                        {
                            Id = new Guid("0196051a-5fce-7dd1-bd5d-03280dcc27e9"),
                            PermissionId = new Guid("01960516-cbce-7251-b410-071a6dd1a200"),
                            RoleId = new Guid("01960513-664b-7304-92de-d2544cfa1ff7")
                        },
                        new
                        {
                            Id = new Guid("0196051a-a482-7439-9b61-41d1c45fd105"),
                            PermissionId = new Guid("01960517-4409-7812-a4c4-3b3c1b3c676c"),
                            RoleId = new Guid("01960513-664b-7304-92de-d2544cfa1ff7")
                        },
                        new
                        {
                            Id = new Guid("0196051b-0f46-73e7-8da9-5a467b71157a"),
                            PermissionId = new Guid("01960516-468d-7f11-90f2-e166cfda751f"),
                            RoleId = new Guid("01960514-3085-7e45-a2ce-dc3336bdbac3")
                        },
                        new
                        {
                            Id = new Guid("0196051b-6543-7f2f-92da-37bcef6eb2d3"),
                            PermissionId = new Guid("01960516-cbce-7251-b410-071a6dd1a200"),
                            RoleId = new Guid("01960514-3085-7e45-a2ce-dc3336bdbac3")
                        },
                        new
                        {
                            Id = new Guid("0196051b-ada9-71ab-9022-4e99496803e0"),
                            PermissionId = new Guid("01960517-4409-7812-a4c4-3b3c1b3c676c"),
                            RoleId = new Guid("01960514-3085-7e45-a2ce-dc3336bdbac3")
                        },
                        new
                        {
                            Id = new Guid("0196051b-ebe8-79e9-8913-459bb1cebfb5"),
                            PermissionId = new Guid("01960518-2c6e-733c-a464-994496458d89"),
                            RoleId = new Guid("01960514-3085-7e45-a2ce-dc3336bdbac3")
                        });
                });

            modelBuilder.Entity("Api.Features.Roles.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01960514-3085-7e45-a2ce-dc3336bdbac3"),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("01960513-664b-7304-92de-d2544cfa1ff7"),
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Api.Features.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Password");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("Api.Services.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", "public");
                });

            modelBuilder.Entity("Api.Features.RolePermissions.Entities.RolePermission", b =>
                {
                    b.HasOne("Api.Features.Permissions.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Features.Roles.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Api.Features.Users.Entities.User", b =>
                {
                    b.HasOne("Api.Features.Roles.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Api.Features.Permissions.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Api.Features.Roles.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
